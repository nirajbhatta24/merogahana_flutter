// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/product.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 74255576351307576),
      name: 'User',
      lastPropertyId: const IdUid(7, 7355523284373221348),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7332253255810075263),
            name: 'uId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6921061494943893801),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 1450204862633749067)),
        ModelProperty(
            id: const IdUid(3, 6297437716689978581),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4667939173217927460),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7156382437710664500),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6502720291092799698),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7355523284373221348),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5819442034456651993),
            name: 'product',
            targetId: const IdUid(2, 4845581452936808099))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4845581452936808099),
      name: 'Product',
      lastPropertyId: const IdUid(6, 494474446816603242),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3787660755897382741),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4860211805416465177),
            name: 'productId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 8461637334063370395)),
        ModelProperty(
            id: const IdUid(3, 8086882103812389673),
            name: 'productname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3609184247992710892),
            name: 'productdetails',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2840341821955402176),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 494474446816603242),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'user', srcEntity: 'User', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4845581452936808099),
      lastIndexId: const IdUid(2, 8461637334063370395),
      lastRelationId: const IdUid(1, 5819442034456651993),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) =>
            {RelInfo<User>.toMany(1, object.uId): object.product},
        getId: (User object) => object.uId,
        setId: (User object, int id) {
          object.uId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          fbb.startTable(8);
          fbb.addInt64(0, object.uId);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, fnameOffset);
          fbb.addOffset(3, lnameOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addOffset(5, usernameOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.uId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              uId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(object.product, store,
              RelInfo<User>.toMany(1, object.uId), store.box<User>());
          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[1],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) =>
            {RelInfo<User>.toManyBacklink(1, object.id): object.user},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final productIdOffset = object.productId == null
              ? null
              : fbb.writeString(object.productId!);
          final productnameOffset = object.productname == null
              ? null
              : fbb.writeString(object.productname!);
          final productdetailsOffset = object.productdetails == null
              ? null
              : fbb.writeString(object.productdetails!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productIdOffset);
          fbb.addOffset(2, productnameOffset);
          fbb.addOffset(3, productdetailsOffset);
          fbb.addInt64(4, object.price);
          fbb.addOffset(5, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(object.user, store,
              RelInfo<User>.toManyBacklink(1, object.id), store.box<Product>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.uId]
  static final uId = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.fname]
  static final fname = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.lname]
  static final lname = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.product]
  static final product =
      QueryRelationToMany<User, Product>(_entities[0].relations[0]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[1].properties[0]);

  /// see [Product.productId]
  static final productId =
      QueryStringProperty<Product>(_entities[1].properties[1]);

  /// see [Product.productname]
  static final productname =
      QueryStringProperty<Product>(_entities[1].properties[2]);

  /// see [Product.productdetails]
  static final productdetails =
      QueryStringProperty<Product>(_entities[1].properties[3]);

  /// see [Product.price]
  static final price =
      QueryIntegerProperty<Product>(_entities[1].properties[4]);

  /// see [Product.image]
  static final image = QueryStringProperty<Product>(_entities[1].properties[5]);
}
